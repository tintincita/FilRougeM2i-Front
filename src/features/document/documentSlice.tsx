import { createSlice } from "@reduxjs/toolkit";
import DocumentModel from "../../models/document.model";

const initialState = {
  documents: [] as DocumentModel[],
};

export const documentSlice = createSlice({
  name: "documents",
  initialState,
  reducers: {
    getDocumentById: (state, action) => {
      const document = state.documents.find(
        (document) => document.id === action.payload.id
      );
      if (!document) {
        state.documents.push(action.payload);
      } else {
        document.title = action.payload.title;
        document.editorCards = action.payload.editorCards;
        document.outlinerCards = action.payload.outlinerCards;
        document.parentSpace = action.payload.parentSpace;
      }
    },
    updateDocumentById: (state, action) => {
      const document = state.documents.find(
        (document) => document.id === action.payload.id
      );
      if (document) {
        document.title = action.payload.title;
        document.editorCards = action.payload.editorCards;
        document.outlinerCards = action.payload.outlinerCards;
        document.parentSpace = action.payload.parentSpace;
      }
    },
    deleteEditorCardandOutlinerCardsById: (state, action) => {
      const id = action.payload;
      state.documents.forEach((document) => {
        document.editorCards = document.editorCards.filter(
          (card) => card.id !== id
        );
        document.outlinerCards = document.outlinerCards.filter(
          (card) => card.id !== id
        );
      });
    },
    updateCardOfEditorCardsAndOutlinerCards: (state, action) => {
      const { id, title, content } = action.payload;
      state.documents.forEach((document) => {
        const editorCard = document.editorCards.find((card) => card.id === id);
        if (editorCard) {
          editorCard.title = title;
          editorCard.content = content;
        }
        const Outlinercard = document.outlinerCards.find(
          (card) => card.id === id
        );
        if (Outlinercard) {
          Outlinercard.title = title;
          Outlinercard.content = content;
        }
      });
    },
    addCardToEditorCardsAndOutlinerCards: (state, action) => {
      state.documents.forEach((document) => {
        document.editorCards.push(action.payload);
        document.outlinerCards.push(action.payload);
      });
    },
  },
});

// Actions generated by the slice
export const {
  getDocumentById,
  updateDocumentById,
  deleteEditorCardandOutlinerCardsById,
  updateCardOfEditorCardsAndOutlinerCards,
  addCardToEditorCardsAndOutlinerCards,
} = documentSlice.actions;

//Selector
export const documentSelector = (state: any) => state.document.documents;

// reducer
export default documentSlice.reducer;
